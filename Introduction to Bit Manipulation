// you should know how to convert from binary to decimal and vice versa(I already know and hence I'm not writing code for this)
Time Complexity & Space Complexity -> O(1) -> It is extremely fast

1's complement -> write binary of the decimal and then take coompliment of it.
eg -> 13 -> 1101 
complement of 1101 is 0010 -> this is the 1's complement

2's complement -> Find out 1's complement and then add 1 to it 
eg -> 13 -> 1101 
complement of 1101 is 0010 -> this is the 1's complement
then add 1 -> 0011 -> this is the 2's complement

// 
AND, OR, XOR, SHIFT, NOT

AND -> All true -> true, one false -> false
eg -> 1101
      0111
    = 0101
OR -> one True -> True, all false -> false
eg -> 1101
      0111
    = 1111
XOR -> no of 1's even -> 0
       no of 1's odd -> 1
eg -> 1101
      0111
    = 1010
SHIFT -> 
-> Right Shift
   eg -> 13>>1
    1101 >> 1 -> 0110 (number is shifted by 1 on the right side)
      -> 13>>2
    1101 >> 2 -> 0011 (number is shifted by 2 on the right side)

  Formula -> x >> k = x/(2^k)

Note -> how does computer store a negative number
suppose it store x=13 as 0   0.......1101
                      sign bit  number
x=-13 is stored as a 2's complement of the above number 
which is 1  111.......0011

-> Left Shift
   eg -> 13<<1
    1101 << 1 -> 11010 (number is shifted by 1 on the left side)
      -> 13>>2
    1101 << 2 -> 110100 (number is shifted by 2 on the left side)
Note -> (2^31 -1)<<1 is a case of overflow

NOT -> 1) flip
       2) check if -ve -> 
          If yes -> store it in its 2's complement 
          If no -> stop
eg  -> x=~(5)  
        0   000.....101
flip -> 1   111.....010
check if negative -> yes it is negative convert it into its 2's complement
        1   000.....101
                     +1
    =   1   000.....110

eg  -> x=~(-6)
        0   000.....110
1's  -> 1   111.....001
                     +1
2's  =  1   111.....010
flip =  0   000.....101
check if negative ->no it is not negative and hence stop
